<flow xmlns="http://www.springframework.org/schema/webflow"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.springframework.org/schema/webflow classpath:/org/springframework/webflow/engine/model/builder/spring-webflow-2.0.xsd"
      parent="Authentication.Abstract">

    <!--
    This is the Authentication subflow. It handles retrieval of an existing session,
    set up and eventual selection of an subflow or active AuthenticationResult, and
    finalization of the processing such as updating a session, before returning control
    to the calling flow.
    -->
    
    <!-- START FLOW SETUP -->
    <action-state id="InitializeAuthenticationContext">
        <evaluate expression="InitializeAuthenticationContext" />
        <transition on="proceed" to="PopulateSessionContext" />
    </action-state>
    
    <action-state id="PopulateSessionContext">
        <evaluate expression="PopulateSessionContext" />
        <transition on="proceed" to="ExtractActiveAuthenticationResults" />
    </action-state>
    
    <action-state id="ExtractActiveAuthenticationResults">
        <evaluate expression="ExtractActiveAuthenticationResults" />
        <transition on="proceed" to="FilterFlowsByForcedAuthn" />
    </action-state>
    
    <action-state id="FilterFlowsByForcedAuthn">
        <evaluate expression="FilterFlowsByForcedAuthn" />
        <transition on="proceed" to="FilterFlowsByPassivity" />
    </action-state>
    
    <action-state id="FilterFlowsByPassivity">
        <evaluate expression="FilterFlowsByPassivity" />
        <transition on="proceed" to="SelectAuthenticationFlow" />
    </action-state>
    <!-- END FLOW SETUP -->
    
    <!--
    The Select action is the "dispatching" step. Proceed here routes around
    calling a new subflow, and goes directly to the Finalize step. Anything
    starting with "AuthenticationFlow/" is a flow descriptor that we send
    control to to attempt a login.
    -->
    <action-state id="SelectAuthenticationFlow">
        <evaluate expression="SelectAuthenticationFlow" />
        
        <!-- proceed indicates SSO (reuse of active result) -->
        <transition on="proceed" to="FinalizeAuthentication" />

        <!-- Call a subflow with the same ID as the event. -->
        <transition on="#{currentEvent.id.startsWith('AuthenticationFlow/')}" to="CallAuthenticationFlow" />
    </action-state>

    <!--
    This invokes an authentication flow to attempt a login. Anything but proceed
    is an error, otherwise control passes to the wrap-up actions, except for a
    ReselectFlow signal to loop back up and try another.
    -->
    <subflow-state id="CallAuthenticationFlow" subflow="#{currentEvent.id}">
        <transition on="ReselectFlow" to="SelectAuthenticationFlow" />
        <transition on="proceed" to="InvalidateSessionOnIdentitySwitch" />
    </subflow-state>

    <!-- Handles an identity switch by dumping the old session. -->
    <action-state id="InvalidateSessionOnIdentitySwitch">
        <evaluate expression="InvalidateSessionOnIdentitySwitch" />
        
        <transition on="proceed" to="FinalizeAuthentication" />
        <!-- Ignore any session layer errors at this stage. -->
        <transition on="InputOutputError" to="FinalizeAuthentication" />
    </action-state>
    
    <!-- Wraps up the subflow or result reuse by producing a SubjectContext. -->
    <action-state id="FinalizeAuthentication">
        <evaluate expression="FinalizeAuthentication" />
        
        <transition on="proceed" to="UpdateSessionWithAuthenticationResult" />
    </action-state>
    
    <!-- Finally, create/update the client session. -->
    <action-state id="UpdateSessionWithAuthenticationResult">
        <evaluate expression="UpdateSessionWithAuthenticationResult" />
        
        <!-- Ignore any session layer errors at this stage. -->
        <transition on="InputOutputError" to="proceed" />
    </action-state>

    <bean-import resource="authn-beans.xml" />

</flow>
