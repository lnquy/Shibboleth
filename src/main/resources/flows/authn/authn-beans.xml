<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans classpath:/org/springframework/beans/factory/xml/spring-beans-3.2.xsd
                           http://www.springframework.org/schema/context classpath:/org/springframework/context/config/spring-context-3.2.xsd
                           http://www.springframework.org/schema/util classpath:/org/springframework/beans/factory/xml/spring-util-3.2.xsd"
                           
       default-init-method="initialize"
       default-destroy-method="destroy">

    <context:property-placeholder location="classpath:conf/idp.properties" />

    <bean class="net.shibboleth.idp.profile.impl.ProfileActionBeanPostProcessor" />

    <!-- The beans to inject to configure the initialization of the subsystem come from the imported files above. -->
    
    <bean id="InitializeAuthenticationContext" class="net.shibboleth.idp.authn.impl.InitializeAuthenticationContext" scope="prototype"
        p:availableFlows="#{@'shibboleth.AvailableAuthenticationFlows'.?[id matches 'AuthenticationFlow/(${idp.authn.flows})']}"
        p:principalEvalPredicateFactoryRegistry-ref="shibboleth.AuthnComparisonRegistry" />

    <bean id="PopulateSessionContext" class="net.shibboleth.idp.session.impl.PopulateSessionContext" scope="prototype"
        p:enabled="${idp.session.enabled}"
        p:httpServletRequest-ref="shibboleth.HttpServletRequest"
        p:sessionResolver-ref="shibboleth.SessionManager" />
    
    <bean id="ExtractActiveAuthenticationResults" class="net.shibboleth.idp.session.impl.ExtractActiveAuthenticationResults" scope="prototype" />

    <bean id="FilterFlowsByForcedAuthn" class="net.shibboleth.idp.authn.impl.FilterFlowsByForcedAuthn" scope="prototype" />

    <bean id="FilterFlowsByPassivity" class="net.shibboleth.idp.authn.impl.FilterFlowsByPassivity" scope="prototype" />

    <bean id="SelectAuthenticationFlow" class="net.shibboleth.idp.authn.impl.SelectAuthenticationFlow" scope="prototype"
        p:favorSSO="${idp.authn.favorSSO}" />
    
    <bean id="InvalidateSessionOnIdentitySwitch" class="net.shibboleth.idp.session.impl.InvalidateSessionOnIdentitySwitch" scope="prototype"
        p:sessionManager-ref="shibboleth.SessionManager" />
    
    <bean id="FinalizeAuthentication" class="net.shibboleth.idp.authn.impl.FinalizeAuthentication" scope="prototype" />
    
    <bean id="UpdateSessionWithAuthenticationResult" class="net.shibboleth.idp.session.impl.UpdateSessionWithAuthenticationResult" scope="prototype"
        p:enabled="${idp.session.enabled}"
        p:sessionManager-ref="shibboleth.SessionManager" />
    
</beans>
